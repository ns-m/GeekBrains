<?php

namespace app\models;

//class User extends \yii\base\BaseObject implements \yii\web\IdentityInterface
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;

/**
* @property int $id
* @property string $name
* @property string $password
* @property string $accessToken
 * @property Event[] $event
 */
class User extends ActiveRecord implements \yii\web\IdentityInterface
{
    public static function tableName()
    {
//        return parent::tableName(); // TODO: Change the autogenerated stub
        return 'user';
    }

    public function rules()
    {
//        return parent::rules(); // TODO: Change the autogenerated stub
        return[
            [['name', 'password'], 'required'],
        ];
    }

    /**
     * @param bool $insert
     * @return bool
     * @throws \yii\base\Exception
     */

    public function beforeSave($insert)
    {
//        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
        if (!parent::beforeSave($insert)){
            return false;
        }

        if ($this->getIsNewRecord() && $this->password){
            $this->password = $this->saltPassword($this->password);
        }

        if (!$this->accessToken){
            $this->accessToken = \Yii::$app->security->generateRandomString();
        }

        return true;
    }

    private function saltPassword(string $password): string
    {
//        return \password_hash($password, \PASSWORD_BCRYPT);
        return \md5($password);
    }

//    public $id;
//    public $name;
//    public $password;
//    public $authKey;
//    public $accessToken;
//
//    private static $users = [
//        '100' => [
//            'id' => '100',
//            'username' => 'admin',
//            'password' => 'admin',
//            'authKey' => 'test100key',
//            'accessToken' => '100-token',
//        ],
//        '101' => [
//            'id' => '101',
//            'username' => 'demo',
//            'password' => 'demo',
//            'authKey' => 'test101key',
//            'accessToken' => '101-token',
//        ],
//    ];


    /**
     * {@inheritdoc}
     */
    public static function findIdentity($id)
    {
//        return isset(self::$users[$id]) ? new static(self::$users[$id]) : null;
        return self::findOne(['id' => $id]);
    }

    /**
     * {@inheritdoc}
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        return self::findOne(['accessToken' => $token]);

//        foreach (self::$users as $user) {
//            if ($user['accessToken'] === $token) {
//                return new static($user);
//            }
//        }
//
//        return null;
    }

    /**
     * Finds user by name
     *
     * @param string $name
     * @return static|null
     */
    public static function findByUsername($name)
    {
//        foreach (self::$users as $user) {
//            if (strcasecmp($user['username'], $username) === 0) {
//                return new static($user);
//            }
//        }
//
//        return null;
        return self::findOne(['name' => $name]);
    }

    /**
     * {@inheritdoc}
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * {@inheritdoc}
     */
    public function getAuthKey()
    {
//        return $this->authKey;
        return $this->accessToken;
    }

    /**
     * {@inheritdoc}
     */
    public function validateAuthKey($authKey)
    {
//        return $this->authKey === $authKey;
        return $this->accessToken === $authKey;
    }

    /**
     * Validates password
     *
     * @param string $password password to validate
     * @return bool if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return $this->password === $this->saltPassword($password);
    }

    /**
     * @return ActiveQuery
     */
    public function getEvent(): ActiveQuery
    {
        return $this->hasMany(Event::class, ['author_id' => 'id']);
    }
}
